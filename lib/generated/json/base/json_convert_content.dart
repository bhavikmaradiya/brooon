// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:brooon/network/refresh_token/refresh_token_response_entity.dart';
import 'package:brooon/views/add_buyer/api_response/add_buyer_response_entity.dart';
import 'package:brooon/views/add_property/api_response/add_property_response_entity.dart';
import 'package:brooon/views/app_feedback/api_response/app_feedback_response_entity.dart';
import 'package:brooon/views/app_update/api_response/ios_app_update_response_entity.dart';
import 'package:brooon/views/authentication/api_response/auth_response_entity.dart';
import 'package:brooon/views/authentication/api_response/logout_response_entity.dart';
import 'package:brooon/views/backup/api_response/upload_backup_info_response_entity.dart';
import 'package:brooon/views/blocked_broooners/api_response/blocked_broooners_response_entity.dart';
import 'package:brooon/views/choose_location/api_response/google_places_details_response_entity.dart';
import 'package:brooon/views/choose_location/api_response/google_places_response_entity.dart';
import 'package:brooon/views/choose_location/api_response/google_reverse_geo_coding_response_entity.dart';
import 'package:brooon/views/choose_location/api_response/update_location_response_entity.dart';
import 'package:brooon/views/home/api_response/check_user_verify_response_entity.dart';
import 'package:brooon/views/inquiry_details/api_response/inquiry_status_response_entity.dart';
import 'package:brooon/views/profile/api_response/update_profile_response_entity.dart';
import 'package:brooon/views/property_details/api_response/property_status_response_entity.dart';
import 'package:brooon/views/report/api_response/report_response_entity.dart';
import 'package:brooon/views/settings/api_response/add_settings_response_entity.dart';
import 'package:brooon/views/shared_by_brooon/api_response/block_unblock_broker_response_entity.dart';
import 'package:brooon/views/shared_by_brooon/api_response/brooon_matching_inquiry_response_entity.dart';
import 'package:brooon/views/shared_by_brooon/api_response/shared_by_brooon_inquiry_response_entity.dart';
import 'package:brooon/views/shared_by_brooon/api_response/shared_by_brooon_matching_response_entity.dart';
import 'package:brooon/views/shared_by_brooon/api_response/shared_by_brooon_property_response_entity.dart';
import 'package:brooon/views/subscription/api_response/add_subscription_response_entity.dart';
import 'package:brooon/views/subscription/api_response/check_purchase_response_entity.dart';
import 'package:brooon/views/subscription/api_response/purchase_history_response_entity.dart';
import 'package:brooon/views/subscription/api_response/subscription_plans_response_entity.dart';
import 'package:brooon/views/watermark/api_response/add_watermark_response_entity.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);

class JsonConvert {
	static final Map<String, JsonConvertFunction> _convertFuncMap = {
		(RefreshTokenResponseEntity).toString(): RefreshTokenResponseEntity.fromJson,
		(RefreshTokenResponseData).toString(): RefreshTokenResponseData.fromJson,
		(AddBuyerResponseEntity).toString(): AddBuyerResponseEntity.fromJson,
		(AddBuyerResponseData).toString(): AddBuyerResponseData.fromJson,
		(AddPropertyResponseEntity).toString(): AddPropertyResponseEntity.fromJson,
		(AddPropertyResponseData).toString(): AddPropertyResponseData.fromJson,
		(AppFeedbackResponseEntity).toString(): AppFeedbackResponseEntity.fromJson,
		(IosAppUpdateResponseEntity).toString(): IosAppUpdateResponseEntity.fromJson,
		(IosAppUpdateResponseResults).toString(): IosAppUpdateResponseResults.fromJson,
		(AuthResponseEntity).toString(): AuthResponseEntity.fromJson,
		(AuthResponseData).toString(): AuthResponseData.fromJson,
		(AuthResponseDataBackupData).toString(): AuthResponseDataBackupData.fromJson,
		(AuthResponseDataBackupDataGoogleDriveFiles).toString(): AuthResponseDataBackupDataGoogleDriveFiles.fromJson,
		(AuthResponseDataSettings).toString(): AuthResponseDataSettings.fromJson,
		(AuthResponseDataSubscription).toString(): AuthResponseDataSubscription.fromJson,
		(AuthResponseDataHelp).toString(): AuthResponseDataHelp.fromJson,
		(AuthResponseDataFollowUs).toString(): AuthResponseDataFollowUs.fromJson,
		(AuthResponseDataAssociationInfo).toString(): AuthResponseDataAssociationInfo.fromJson,
		(LogoutResponseEntity).toString(): LogoutResponseEntity.fromJson,
		(LogoutResponseData).toString(): LogoutResponseData.fromJson,
		(UploadBackupInfoResponseEntity).toString(): UploadBackupInfoResponseEntity.fromJson,
		(UploadBackupInfoResponseData).toString(): UploadBackupInfoResponseData.fromJson,
		(BlockedBrooonersResponseEntity).toString(): BlockedBrooonersResponseEntity.fromJson,
		(BlockedBrooonersResponseData).toString(): BlockedBrooonersResponseData.fromJson,
		(BlockedBrooonersResponseDataUsers).toString(): BlockedBrooonersResponseDataUsers.fromJson,
		(BlockedBrooonersResponseDataUsersBrooonInfo).toString(): BlockedBrooonersResponseDataUsersBrooonInfo.fromJson,
		(GooglePlacesDetailsResponseEntity).toString(): GooglePlacesDetailsResponseEntity.fromJson,
		(GooglePlacesDetailsResponseResult).toString(): GooglePlacesDetailsResponseResult.fromJson,
		(GooglePlacesDetailsResponseResultGeometry).toString(): GooglePlacesDetailsResponseResultGeometry.fromJson,
		(GooglePlacesDetailsResponseResultGeometryLocation).toString(): GooglePlacesDetailsResponseResultGeometryLocation.fromJson,
		(GooglePlacesDetailsResponseResultGeometryViewport).toString(): GooglePlacesDetailsResponseResultGeometryViewport.fromJson,
		(GooglePlacesDetailsResponseResultGeometryViewportNortheast).toString(): GooglePlacesDetailsResponseResultGeometryViewportNortheast.fromJson,
		(GooglePlacesDetailsResponseResultGeometryViewportSouthwest).toString(): GooglePlacesDetailsResponseResultGeometryViewportSouthwest.fromJson,
		(GooglePlacesResponseEntity).toString(): GooglePlacesResponseEntity.fromJson,
		(GooglePlacesResponsePredictions).toString(): GooglePlacesResponsePredictions.fromJson,
		(GooglePlacesResponsePredictionsMatchedSubstrings).toString(): GooglePlacesResponsePredictionsMatchedSubstrings.fromJson,
		(GooglePlacesResponsePredictionsStructuredFormatting).toString(): GooglePlacesResponsePredictionsStructuredFormatting.fromJson,
		(GooglePlacesResponsePredictionsStructuredFormattingMainTextMatchedSubstrings).toString(): GooglePlacesResponsePredictionsStructuredFormattingMainTextMatchedSubstrings.fromJson,
		(GooglePlacesResponsePredictionsStructuredFormattingSecondaryTextMatchedSubstrings).toString(): GooglePlacesResponsePredictionsStructuredFormattingSecondaryTextMatchedSubstrings.fromJson,
		(GooglePlacesResponsePredictionsTerms).toString(): GooglePlacesResponsePredictionsTerms.fromJson,
		(GoogleReverseGeoCodingResponseEntity).toString(): GoogleReverseGeoCodingResponseEntity.fromJson,
		(GoogleReverseGeoCodingResponsePlusCode).toString(): GoogleReverseGeoCodingResponsePlusCode.fromJson,
		(GoogleReverseGeoCodingResponseResults).toString(): GoogleReverseGeoCodingResponseResults.fromJson,
		(GoogleReverseGeoCodingResponseResultsAddressComponents).toString(): GoogleReverseGeoCodingResponseResultsAddressComponents.fromJson,
		(GoogleReverseGeoCodingResponseResultsGeometry).toString(): GoogleReverseGeoCodingResponseResultsGeometry.fromJson,
		(GoogleReverseGeoCodingResponseResultsGeometryLocation).toString(): GoogleReverseGeoCodingResponseResultsGeometryLocation.fromJson,
		(GoogleReverseGeoCodingResponseResultsGeometryViewport).toString(): GoogleReverseGeoCodingResponseResultsGeometryViewport.fromJson,
		(GoogleReverseGeoCodingResponseResultsGeometryViewportNortheast).toString(): GoogleReverseGeoCodingResponseResultsGeometryViewportNortheast.fromJson,
		(GoogleReverseGeoCodingResponseResultsGeometryViewportSouthwest).toString(): GoogleReverseGeoCodingResponseResultsGeometryViewportSouthwest.fromJson,
		(GoogleReverseGeoCodingResponseResultsPlusCode).toString(): GoogleReverseGeoCodingResponseResultsPlusCode.fromJson,
		(UpdateLocationResponseEntity).toString(): UpdateLocationResponseEntity.fromJson,
		(UpdateLocationResponseData).toString(): UpdateLocationResponseData.fromJson,
		(CheckUserVerifyResponseEntity).toString(): CheckUserVerifyResponseEntity.fromJson,
		(CheckUserVerifyResponseData).toString(): CheckUserVerifyResponseData.fromJson,
		(InquiryStatusResponseEntity).toString(): InquiryStatusResponseEntity.fromJson,
		(InquiryStatusResponseData).toString(): InquiryStatusResponseData.fromJson,
		(UpdateProfileResponseEntity).toString(): UpdateProfileResponseEntity.fromJson,
		(UpdateProfileResponseData).toString(): UpdateProfileResponseData.fromJson,
		(PropertyStatusResponseEntity).toString(): PropertyStatusResponseEntity.fromJson,
		(PropertyStatusResponseData).toString(): PropertyStatusResponseData.fromJson,
		(ReportResponseEntity).toString(): ReportResponseEntity.fromJson,
		(AddSettingsResponseEntity).toString(): AddSettingsResponseEntity.fromJson,
		(AddSettingsResponseData).toString(): AddSettingsResponseData.fromJson,
		(BlockUnblockBrokerResponseEntity).toString(): BlockUnblockBrokerResponseEntity.fromJson,
		(BrooonMatchingInquiryResponseEntity).toString(): BrooonMatchingInquiryResponseEntity.fromJson,
		(BrooonMatchingInquiryResponseData).toString(): BrooonMatchingInquiryResponseData.fromJson,
		(BrooonMatchingInquiryResponseDataBrooonInfo).toString(): BrooonMatchingInquiryResponseDataBrooonInfo.fromJson,
		(BrooonMatchingInquiryResponseDataBrooonInfoAssociationInfo).toString(): BrooonMatchingInquiryResponseDataBrooonInfoAssociationInfo.fromJson,
		(SharedByBrooonInquiryResponseEntity).toString(): SharedByBrooonInquiryResponseEntity.fromJson,
		(SharedByBrooonInquiryResponseData).toString(): SharedByBrooonInquiryResponseData.fromJson,
		(SharedByBrooonInquiryResponseDataInquiries).toString(): SharedByBrooonInquiryResponseDataInquiries.fromJson,
		(SharedByBrooonInquiryResponseDataInquiriesBrooonInfo).toString(): SharedByBrooonInquiryResponseDataInquiriesBrooonInfo.fromJson,
		(SharedByBrooonInquiryResponseDataInquiriesBrooonAssociationInfo).toString(): SharedByBrooonInquiryResponseDataInquiriesBrooonAssociationInfo.fromJson,
		(SharedByBrooonMatchingResponseEntity).toString(): SharedByBrooonMatchingResponseEntity.fromJson,
		(SharedByBrooonMatchingResponseData).toString(): SharedByBrooonMatchingResponseData.fromJson,
		(SharedByBrooonMatchingResponseDataBrooonInfo).toString(): SharedByBrooonMatchingResponseDataBrooonInfo.fromJson,
		(SharedByBrooonMatchingResponseDataBrooonInfoAssociationInfo).toString(): SharedByBrooonMatchingResponseDataBrooonInfoAssociationInfo.fromJson,
		(SharedByBrooonPropertyResponseEntity).toString(): SharedByBrooonPropertyResponseEntity.fromJson,
		(SharedByBrooonPropertyResponseData).toString(): SharedByBrooonPropertyResponseData.fromJson,
		(SharedByBrooonPropertyResponseDataProperty).toString(): SharedByBrooonPropertyResponseDataProperty.fromJson,
		(SharedByBrooonPropertyResponseDataPropertyBrooonInfo).toString(): SharedByBrooonPropertyResponseDataPropertyBrooonInfo.fromJson,
		(SharedByBrooonPropertyResponseDataPropertyBrooonAssociationInfo).toString(): SharedByBrooonPropertyResponseDataPropertyBrooonAssociationInfo.fromJson,
		(AddSubscriptionResponseEntity).toString(): AddSubscriptionResponseEntity.fromJson,
		(AddSubscriptionResponseData).toString(): AddSubscriptionResponseData.fromJson,
		(CheckPurchaseResponseEntity).toString(): CheckPurchaseResponseEntity.fromJson,
		(CheckPurchaseResponseData).toString(): CheckPurchaseResponseData.fromJson,
		(PurchaseHistoryResponseEntity).toString(): PurchaseHistoryResponseEntity.fromJson,
		(PurchaseHistoryResponseData).toString(): PurchaseHistoryResponseData.fromJson,
		(PurchaseHistoryResponseDataCurrentSubscription).toString(): PurchaseHistoryResponseDataCurrentSubscription.fromJson,
		(PurchaseHistoryResponseDataPreviousSubscription).toString(): PurchaseHistoryResponseDataPreviousSubscription.fromJson,
		(SubscriptionPlansResponseEntity).toString(): SubscriptionPlansResponseEntity.fromJson,
		(SubscriptionPlansResponseData).toString(): SubscriptionPlansResponseData.fromJson,
		(SubscriptionPlansResponseDataPlans).toString(): SubscriptionPlansResponseDataPlans.fromJson,
		(AddWatermarkResponseEntity).toString(): AddWatermarkResponseEntity.fromJson,
		(AddWatermarkResponseData).toString(): AddWatermarkResponseData.fromJson,
	};

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? asT<T extends Object?>(dynamic value) {
    if(value == null){
      return null;
    }
    if (value is T) {
      return value;
    }
    final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }
      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type == "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type == "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else if (type == "Map" || type.startsWith("Map<")) {
        return value as T;
      } else {
        if (_convertFuncMap.containsKey(type)) {
          return _convertFuncMap[type]!(value) as T;
        } else {
          throw UnimplementedError('$type unimplemented');
        }
      }
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<RefreshTokenResponseEntity>[] is M){
			return data.map<RefreshTokenResponseEntity>((Map<String, dynamic> e) => RefreshTokenResponseEntity.fromJson(e)).toList() as M;
		}
		if(<RefreshTokenResponseData>[] is M){
			return data.map<RefreshTokenResponseData>((Map<String, dynamic> e) => RefreshTokenResponseData.fromJson(e)).toList() as M;
		}
		if(<AddBuyerResponseEntity>[] is M){
			return data.map<AddBuyerResponseEntity>((Map<String, dynamic> e) => AddBuyerResponseEntity.fromJson(e)).toList() as M;
		}
		if(<AddBuyerResponseData>[] is M){
			return data.map<AddBuyerResponseData>((Map<String, dynamic> e) => AddBuyerResponseData.fromJson(e)).toList() as M;
		}
		if(<AddPropertyResponseEntity>[] is M){
			return data.map<AddPropertyResponseEntity>((Map<String, dynamic> e) => AddPropertyResponseEntity.fromJson(e)).toList() as M;
		}
		if(<AddPropertyResponseData>[] is M){
			return data.map<AddPropertyResponseData>((Map<String, dynamic> e) => AddPropertyResponseData.fromJson(e)).toList() as M;
		}
		if(<AppFeedbackResponseEntity>[] is M){
			return data.map<AppFeedbackResponseEntity>((Map<String, dynamic> e) => AppFeedbackResponseEntity.fromJson(e)).toList() as M;
		}
		if(<IosAppUpdateResponseEntity>[] is M){
			return data.map<IosAppUpdateResponseEntity>((Map<String, dynamic> e) => IosAppUpdateResponseEntity.fromJson(e)).toList() as M;
		}
		if(<IosAppUpdateResponseResults>[] is M){
			return data.map<IosAppUpdateResponseResults>((Map<String, dynamic> e) => IosAppUpdateResponseResults.fromJson(e)).toList() as M;
		}
		if(<AuthResponseEntity>[] is M){
			return data.map<AuthResponseEntity>((Map<String, dynamic> e) => AuthResponseEntity.fromJson(e)).toList() as M;
		}
		if(<AuthResponseData>[] is M){
			return data.map<AuthResponseData>((Map<String, dynamic> e) => AuthResponseData.fromJson(e)).toList() as M;
		}
		if(<AuthResponseDataBackupData>[] is M){
			return data.map<AuthResponseDataBackupData>((Map<String, dynamic> e) => AuthResponseDataBackupData.fromJson(e)).toList() as M;
		}
		if(<AuthResponseDataBackupDataGoogleDriveFiles>[] is M){
			return data.map<AuthResponseDataBackupDataGoogleDriveFiles>((Map<String, dynamic> e) => AuthResponseDataBackupDataGoogleDriveFiles.fromJson(e)).toList() as M;
		}
		if(<AuthResponseDataSettings>[] is M){
			return data.map<AuthResponseDataSettings>((Map<String, dynamic> e) => AuthResponseDataSettings.fromJson(e)).toList() as M;
		}
		if(<AuthResponseDataSubscription>[] is M){
			return data.map<AuthResponseDataSubscription>((Map<String, dynamic> e) => AuthResponseDataSubscription.fromJson(e)).toList() as M;
		}
		if(<AuthResponseDataHelp>[] is M){
			return data.map<AuthResponseDataHelp>((Map<String, dynamic> e) => AuthResponseDataHelp.fromJson(e)).toList() as M;
		}
		if(<AuthResponseDataFollowUs>[] is M){
			return data.map<AuthResponseDataFollowUs>((Map<String, dynamic> e) => AuthResponseDataFollowUs.fromJson(e)).toList() as M;
		}
		if(<AuthResponseDataAssociationInfo>[] is M){
			return data.map<AuthResponseDataAssociationInfo>((Map<String, dynamic> e) => AuthResponseDataAssociationInfo.fromJson(e)).toList() as M;
		}
		if(<LogoutResponseEntity>[] is M){
			return data.map<LogoutResponseEntity>((Map<String, dynamic> e) => LogoutResponseEntity.fromJson(e)).toList() as M;
		}
		if(<LogoutResponseData>[] is M){
			return data.map<LogoutResponseData>((Map<String, dynamic> e) => LogoutResponseData.fromJson(e)).toList() as M;
		}
		if(<UploadBackupInfoResponseEntity>[] is M){
			return data.map<UploadBackupInfoResponseEntity>((Map<String, dynamic> e) => UploadBackupInfoResponseEntity.fromJson(e)).toList() as M;
		}
		if(<UploadBackupInfoResponseData>[] is M){
			return data.map<UploadBackupInfoResponseData>((Map<String, dynamic> e) => UploadBackupInfoResponseData.fromJson(e)).toList() as M;
		}
		if(<BlockedBrooonersResponseEntity>[] is M){
			return data.map<BlockedBrooonersResponseEntity>((Map<String, dynamic> e) => BlockedBrooonersResponseEntity.fromJson(e)).toList() as M;
		}
		if(<BlockedBrooonersResponseData>[] is M){
			return data.map<BlockedBrooonersResponseData>((Map<String, dynamic> e) => BlockedBrooonersResponseData.fromJson(e)).toList() as M;
		}
		if(<BlockedBrooonersResponseDataUsers>[] is M){
			return data.map<BlockedBrooonersResponseDataUsers>((Map<String, dynamic> e) => BlockedBrooonersResponseDataUsers.fromJson(e)).toList() as M;
		}
		if(<BlockedBrooonersResponseDataUsersBrooonInfo>[] is M){
			return data.map<BlockedBrooonersResponseDataUsersBrooonInfo>((Map<String, dynamic> e) => BlockedBrooonersResponseDataUsersBrooonInfo.fromJson(e)).toList() as M;
		}
		if(<GooglePlacesDetailsResponseEntity>[] is M){
			return data.map<GooglePlacesDetailsResponseEntity>((Map<String, dynamic> e) => GooglePlacesDetailsResponseEntity.fromJson(e)).toList() as M;
		}
		if(<GooglePlacesDetailsResponseResult>[] is M){
			return data.map<GooglePlacesDetailsResponseResult>((Map<String, dynamic> e) => GooglePlacesDetailsResponseResult.fromJson(e)).toList() as M;
		}
		if(<GooglePlacesDetailsResponseResultGeometry>[] is M){
			return data.map<GooglePlacesDetailsResponseResultGeometry>((Map<String, dynamic> e) => GooglePlacesDetailsResponseResultGeometry.fromJson(e)).toList() as M;
		}
		if(<GooglePlacesDetailsResponseResultGeometryLocation>[] is M){
			return data.map<GooglePlacesDetailsResponseResultGeometryLocation>((Map<String, dynamic> e) => GooglePlacesDetailsResponseResultGeometryLocation.fromJson(e)).toList() as M;
		}
		if(<GooglePlacesDetailsResponseResultGeometryViewport>[] is M){
			return data.map<GooglePlacesDetailsResponseResultGeometryViewport>((Map<String, dynamic> e) => GooglePlacesDetailsResponseResultGeometryViewport.fromJson(e)).toList() as M;
		}
		if(<GooglePlacesDetailsResponseResultGeometryViewportNortheast>[] is M){
			return data.map<GooglePlacesDetailsResponseResultGeometryViewportNortheast>((Map<String, dynamic> e) => GooglePlacesDetailsResponseResultGeometryViewportNortheast.fromJson(e)).toList() as M;
		}
		if(<GooglePlacesDetailsResponseResultGeometryViewportSouthwest>[] is M){
			return data.map<GooglePlacesDetailsResponseResultGeometryViewportSouthwest>((Map<String, dynamic> e) => GooglePlacesDetailsResponseResultGeometryViewportSouthwest.fromJson(e)).toList() as M;
		}
		if(<GooglePlacesResponseEntity>[] is M){
			return data.map<GooglePlacesResponseEntity>((Map<String, dynamic> e) => GooglePlacesResponseEntity.fromJson(e)).toList() as M;
		}
		if(<GooglePlacesResponsePredictions>[] is M){
			return data.map<GooglePlacesResponsePredictions>((Map<String, dynamic> e) => GooglePlacesResponsePredictions.fromJson(e)).toList() as M;
		}
		if(<GooglePlacesResponsePredictionsMatchedSubstrings>[] is M){
			return data.map<GooglePlacesResponsePredictionsMatchedSubstrings>((Map<String, dynamic> e) => GooglePlacesResponsePredictionsMatchedSubstrings.fromJson(e)).toList() as M;
		}
		if(<GooglePlacesResponsePredictionsStructuredFormatting>[] is M){
			return data.map<GooglePlacesResponsePredictionsStructuredFormatting>((Map<String, dynamic> e) => GooglePlacesResponsePredictionsStructuredFormatting.fromJson(e)).toList() as M;
		}
		if(<GooglePlacesResponsePredictionsStructuredFormattingMainTextMatchedSubstrings>[] is M){
			return data.map<GooglePlacesResponsePredictionsStructuredFormattingMainTextMatchedSubstrings>((Map<String, dynamic> e) => GooglePlacesResponsePredictionsStructuredFormattingMainTextMatchedSubstrings.fromJson(e)).toList() as M;
		}
		if(<GooglePlacesResponsePredictionsStructuredFormattingSecondaryTextMatchedSubstrings>[] is M){
			return data.map<GooglePlacesResponsePredictionsStructuredFormattingSecondaryTextMatchedSubstrings>((Map<String, dynamic> e) => GooglePlacesResponsePredictionsStructuredFormattingSecondaryTextMatchedSubstrings.fromJson(e)).toList() as M;
		}
		if(<GooglePlacesResponsePredictionsTerms>[] is M){
			return data.map<GooglePlacesResponsePredictionsTerms>((Map<String, dynamic> e) => GooglePlacesResponsePredictionsTerms.fromJson(e)).toList() as M;
		}
		if(<GoogleReverseGeoCodingResponseEntity>[] is M){
			return data.map<GoogleReverseGeoCodingResponseEntity>((Map<String, dynamic> e) => GoogleReverseGeoCodingResponseEntity.fromJson(e)).toList() as M;
		}
		if(<GoogleReverseGeoCodingResponsePlusCode>[] is M){
			return data.map<GoogleReverseGeoCodingResponsePlusCode>((Map<String, dynamic> e) => GoogleReverseGeoCodingResponsePlusCode.fromJson(e)).toList() as M;
		}
		if(<GoogleReverseGeoCodingResponseResults>[] is M){
			return data.map<GoogleReverseGeoCodingResponseResults>((Map<String, dynamic> e) => GoogleReverseGeoCodingResponseResults.fromJson(e)).toList() as M;
		}
		if(<GoogleReverseGeoCodingResponseResultsAddressComponents>[] is M){
			return data.map<GoogleReverseGeoCodingResponseResultsAddressComponents>((Map<String, dynamic> e) => GoogleReverseGeoCodingResponseResultsAddressComponents.fromJson(e)).toList() as M;
		}
		if(<GoogleReverseGeoCodingResponseResultsGeometry>[] is M){
			return data.map<GoogleReverseGeoCodingResponseResultsGeometry>((Map<String, dynamic> e) => GoogleReverseGeoCodingResponseResultsGeometry.fromJson(e)).toList() as M;
		}
		if(<GoogleReverseGeoCodingResponseResultsGeometryLocation>[] is M){
			return data.map<GoogleReverseGeoCodingResponseResultsGeometryLocation>((Map<String, dynamic> e) => GoogleReverseGeoCodingResponseResultsGeometryLocation.fromJson(e)).toList() as M;
		}
		if(<GoogleReverseGeoCodingResponseResultsGeometryViewport>[] is M){
			return data.map<GoogleReverseGeoCodingResponseResultsGeometryViewport>((Map<String, dynamic> e) => GoogleReverseGeoCodingResponseResultsGeometryViewport.fromJson(e)).toList() as M;
		}
		if(<GoogleReverseGeoCodingResponseResultsGeometryViewportNortheast>[] is M){
			return data.map<GoogleReverseGeoCodingResponseResultsGeometryViewportNortheast>((Map<String, dynamic> e) => GoogleReverseGeoCodingResponseResultsGeometryViewportNortheast.fromJson(e)).toList() as M;
		}
		if(<GoogleReverseGeoCodingResponseResultsGeometryViewportSouthwest>[] is M){
			return data.map<GoogleReverseGeoCodingResponseResultsGeometryViewportSouthwest>((Map<String, dynamic> e) => GoogleReverseGeoCodingResponseResultsGeometryViewportSouthwest.fromJson(e)).toList() as M;
		}
		if(<GoogleReverseGeoCodingResponseResultsPlusCode>[] is M){
			return data.map<GoogleReverseGeoCodingResponseResultsPlusCode>((Map<String, dynamic> e) => GoogleReverseGeoCodingResponseResultsPlusCode.fromJson(e)).toList() as M;
		}
		if(<UpdateLocationResponseEntity>[] is M){
			return data.map<UpdateLocationResponseEntity>((Map<String, dynamic> e) => UpdateLocationResponseEntity.fromJson(e)).toList() as M;
		}
		if(<UpdateLocationResponseData>[] is M){
			return data.map<UpdateLocationResponseData>((Map<String, dynamic> e) => UpdateLocationResponseData.fromJson(e)).toList() as M;
		}
		if(<CheckUserVerifyResponseEntity>[] is M){
			return data.map<CheckUserVerifyResponseEntity>((Map<String, dynamic> e) => CheckUserVerifyResponseEntity.fromJson(e)).toList() as M;
		}
		if(<CheckUserVerifyResponseData>[] is M){
			return data.map<CheckUserVerifyResponseData>((Map<String, dynamic> e) => CheckUserVerifyResponseData.fromJson(e)).toList() as M;
		}
		if(<InquiryStatusResponseEntity>[] is M){
			return data.map<InquiryStatusResponseEntity>((Map<String, dynamic> e) => InquiryStatusResponseEntity.fromJson(e)).toList() as M;
		}
		if(<InquiryStatusResponseData>[] is M){
			return data.map<InquiryStatusResponseData>((Map<String, dynamic> e) => InquiryStatusResponseData.fromJson(e)).toList() as M;
		}
		if(<UpdateProfileResponseEntity>[] is M){
			return data.map<UpdateProfileResponseEntity>((Map<String, dynamic> e) => UpdateProfileResponseEntity.fromJson(e)).toList() as M;
		}
		if(<UpdateProfileResponseData>[] is M){
			return data.map<UpdateProfileResponseData>((Map<String, dynamic> e) => UpdateProfileResponseData.fromJson(e)).toList() as M;
		}
		if(<PropertyStatusResponseEntity>[] is M){
			return data.map<PropertyStatusResponseEntity>((Map<String, dynamic> e) => PropertyStatusResponseEntity.fromJson(e)).toList() as M;
		}
		if(<PropertyStatusResponseData>[] is M){
			return data.map<PropertyStatusResponseData>((Map<String, dynamic> e) => PropertyStatusResponseData.fromJson(e)).toList() as M;
		}
		if(<ReportResponseEntity>[] is M){
			return data.map<ReportResponseEntity>((Map<String, dynamic> e) => ReportResponseEntity.fromJson(e)).toList() as M;
		}
		if(<AddSettingsResponseEntity>[] is M){
			return data.map<AddSettingsResponseEntity>((Map<String, dynamic> e) => AddSettingsResponseEntity.fromJson(e)).toList() as M;
		}
		if(<AddSettingsResponseData>[] is M){
			return data.map<AddSettingsResponseData>((Map<String, dynamic> e) => AddSettingsResponseData.fromJson(e)).toList() as M;
		}
		if(<BlockUnblockBrokerResponseEntity>[] is M){
			return data.map<BlockUnblockBrokerResponseEntity>((Map<String, dynamic> e) => BlockUnblockBrokerResponseEntity.fromJson(e)).toList() as M;
		}
		if(<BrooonMatchingInquiryResponseEntity>[] is M){
			return data.map<BrooonMatchingInquiryResponseEntity>((Map<String, dynamic> e) => BrooonMatchingInquiryResponseEntity.fromJson(e)).toList() as M;
		}
		if(<BrooonMatchingInquiryResponseData>[] is M){
			return data.map<BrooonMatchingInquiryResponseData>((Map<String, dynamic> e) => BrooonMatchingInquiryResponseData.fromJson(e)).toList() as M;
		}
		if(<BrooonMatchingInquiryResponseDataBrooonInfo>[] is M){
			return data.map<BrooonMatchingInquiryResponseDataBrooonInfo>((Map<String, dynamic> e) => BrooonMatchingInquiryResponseDataBrooonInfo.fromJson(e)).toList() as M;
		}
		if(<BrooonMatchingInquiryResponseDataBrooonInfoAssociationInfo>[] is M){
			return data.map<BrooonMatchingInquiryResponseDataBrooonInfoAssociationInfo>((Map<String, dynamic> e) => BrooonMatchingInquiryResponseDataBrooonInfoAssociationInfo.fromJson(e)).toList() as M;
		}
		if(<SharedByBrooonInquiryResponseEntity>[] is M){
			return data.map<SharedByBrooonInquiryResponseEntity>((Map<String, dynamic> e) => SharedByBrooonInquiryResponseEntity.fromJson(e)).toList() as M;
		}
		if(<SharedByBrooonInquiryResponseData>[] is M){
			return data.map<SharedByBrooonInquiryResponseData>((Map<String, dynamic> e) => SharedByBrooonInquiryResponseData.fromJson(e)).toList() as M;
		}
		if(<SharedByBrooonInquiryResponseDataInquiries>[] is M){
			return data.map<SharedByBrooonInquiryResponseDataInquiries>((Map<String, dynamic> e) => SharedByBrooonInquiryResponseDataInquiries.fromJson(e)).toList() as M;
		}
		if(<SharedByBrooonInquiryResponseDataInquiriesBrooonInfo>[] is M){
			return data.map<SharedByBrooonInquiryResponseDataInquiriesBrooonInfo>((Map<String, dynamic> e) => SharedByBrooonInquiryResponseDataInquiriesBrooonInfo.fromJson(e)).toList() as M;
		}
		if(<SharedByBrooonInquiryResponseDataInquiriesBrooonAssociationInfo>[] is M){
			return data.map<SharedByBrooonInquiryResponseDataInquiriesBrooonAssociationInfo>((Map<String, dynamic> e) => SharedByBrooonInquiryResponseDataInquiriesBrooonAssociationInfo.fromJson(e)).toList() as M;
		}
		if(<SharedByBrooonMatchingResponseEntity>[] is M){
			return data.map<SharedByBrooonMatchingResponseEntity>((Map<String, dynamic> e) => SharedByBrooonMatchingResponseEntity.fromJson(e)).toList() as M;
		}
		if(<SharedByBrooonMatchingResponseData>[] is M){
			return data.map<SharedByBrooonMatchingResponseData>((Map<String, dynamic> e) => SharedByBrooonMatchingResponseData.fromJson(e)).toList() as M;
		}
		if(<SharedByBrooonMatchingResponseDataBrooonInfo>[] is M){
			return data.map<SharedByBrooonMatchingResponseDataBrooonInfo>((Map<String, dynamic> e) => SharedByBrooonMatchingResponseDataBrooonInfo.fromJson(e)).toList() as M;
		}
		if(<SharedByBrooonMatchingResponseDataBrooonInfoAssociationInfo>[] is M){
			return data.map<SharedByBrooonMatchingResponseDataBrooonInfoAssociationInfo>((Map<String, dynamic> e) => SharedByBrooonMatchingResponseDataBrooonInfoAssociationInfo.fromJson(e)).toList() as M;
		}
		if(<SharedByBrooonPropertyResponseEntity>[] is M){
			return data.map<SharedByBrooonPropertyResponseEntity>((Map<String, dynamic> e) => SharedByBrooonPropertyResponseEntity.fromJson(e)).toList() as M;
		}
		if(<SharedByBrooonPropertyResponseData>[] is M){
			return data.map<SharedByBrooonPropertyResponseData>((Map<String, dynamic> e) => SharedByBrooonPropertyResponseData.fromJson(e)).toList() as M;
		}
		if(<SharedByBrooonPropertyResponseDataProperty>[] is M){
			return data.map<SharedByBrooonPropertyResponseDataProperty>((Map<String, dynamic> e) => SharedByBrooonPropertyResponseDataProperty.fromJson(e)).toList() as M;
		}
		if(<SharedByBrooonPropertyResponseDataPropertyBrooonInfo>[] is M){
			return data.map<SharedByBrooonPropertyResponseDataPropertyBrooonInfo>((Map<String, dynamic> e) => SharedByBrooonPropertyResponseDataPropertyBrooonInfo.fromJson(e)).toList() as M;
		}
		if(<SharedByBrooonPropertyResponseDataPropertyBrooonAssociationInfo>[] is M){
			return data.map<SharedByBrooonPropertyResponseDataPropertyBrooonAssociationInfo>((Map<String, dynamic> e) => SharedByBrooonPropertyResponseDataPropertyBrooonAssociationInfo.fromJson(e)).toList() as M;
		}
		if(<AddSubscriptionResponseEntity>[] is M){
			return data.map<AddSubscriptionResponseEntity>((Map<String, dynamic> e) => AddSubscriptionResponseEntity.fromJson(e)).toList() as M;
		}
		if(<AddSubscriptionResponseData>[] is M){
			return data.map<AddSubscriptionResponseData>((Map<String, dynamic> e) => AddSubscriptionResponseData.fromJson(e)).toList() as M;
		}
		if(<CheckPurchaseResponseEntity>[] is M){
			return data.map<CheckPurchaseResponseEntity>((Map<String, dynamic> e) => CheckPurchaseResponseEntity.fromJson(e)).toList() as M;
		}
		if(<CheckPurchaseResponseData>[] is M){
			return data.map<CheckPurchaseResponseData>((Map<String, dynamic> e) => CheckPurchaseResponseData.fromJson(e)).toList() as M;
		}
		if(<PurchaseHistoryResponseEntity>[] is M){
			return data.map<PurchaseHistoryResponseEntity>((Map<String, dynamic> e) => PurchaseHistoryResponseEntity.fromJson(e)).toList() as M;
		}
		if(<PurchaseHistoryResponseData>[] is M){
			return data.map<PurchaseHistoryResponseData>((Map<String, dynamic> e) => PurchaseHistoryResponseData.fromJson(e)).toList() as M;
		}
		if(<PurchaseHistoryResponseDataCurrentSubscription>[] is M){
			return data.map<PurchaseHistoryResponseDataCurrentSubscription>((Map<String, dynamic> e) => PurchaseHistoryResponseDataCurrentSubscription.fromJson(e)).toList() as M;
		}
		if(<PurchaseHistoryResponseDataPreviousSubscription>[] is M){
			return data.map<PurchaseHistoryResponseDataPreviousSubscription>((Map<String, dynamic> e) => PurchaseHistoryResponseDataPreviousSubscription.fromJson(e)).toList() as M;
		}
		if(<SubscriptionPlansResponseEntity>[] is M){
			return data.map<SubscriptionPlansResponseEntity>((Map<String, dynamic> e) => SubscriptionPlansResponseEntity.fromJson(e)).toList() as M;
		}
		if(<SubscriptionPlansResponseData>[] is M){
			return data.map<SubscriptionPlansResponseData>((Map<String, dynamic> e) => SubscriptionPlansResponseData.fromJson(e)).toList() as M;
		}
		if(<SubscriptionPlansResponseDataPlans>[] is M){
			return data.map<SubscriptionPlansResponseDataPlans>((Map<String, dynamic> e) => SubscriptionPlansResponseDataPlans.fromJson(e)).toList() as M;
		}
		if(<AddWatermarkResponseEntity>[] is M){
			return data.map<AddWatermarkResponseEntity>((Map<String, dynamic> e) => AddWatermarkResponseEntity.fromJson(e)).toList() as M;
		}
		if(<AddWatermarkResponseData>[] is M){
			return data.map<AddWatermarkResponseData>((Map<String, dynamic> e) => AddWatermarkResponseData.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.asT<M>(json);
		}
	}
}